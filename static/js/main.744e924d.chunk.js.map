{"version":3,"sources":["reducers/WeatherReducer.js","api/WeatherAPI.js","context/GlobalState.js","components/Header.js","components/Weather.js","components/WeatherList.js","components/App.js","index.js"],"names":["weatherReducer","state","action","type","weatherData","length","splice","payload","weatherAPI","cityName","axios","get","then","res","data","catch","err","console","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","WeatherReducer","dispatch","a","cityData","Provider","value","addCity","Header","useState","setCity","useContext","className","onSubmit","e","preventDefault","style","logoColor","placeholder","aria-label","onChange","target","color","Weather","weather","sunrise","setSunrise","sunset","setSunset","useEffect","dateNow","mtz","tz","timezone","format","city_name","temp","src","icon","alt","description","WeatherList","weatherCities","map","city","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.744e924d.chunk.js","sourcesContent":["const weatherReducer = (state, action) => {\n    switch(action.type) {\n        case 'ADD_CITY':\n            // console.log('action.payload', action.payload)\n            if(state.weatherData.length<3) {\n                return {\n                    ...state,\n                    weatherData: [action.payload, ...state.weatherData]\n                }\n            }\n            // remover position 2 and add new data\n            // console.log('hello there', state);\n            state.weatherData.splice(2, 1);\n            return {\n                ...state,\n                weatherData: [action.payload, ...state.weatherData]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer","import axios from 'axios'\n\nexport const weatherAPI = cityName => {\n    \n    return axios.get(`https://api.weatherbit.io/v2.0/current?city=${cityName}&key=6accba4c460e4434ba36f3d1a5ac1031`)\n        .then(res => {\n            // console.log('res', res.data.data[0]);\n            return res.data.data[0]\n        })\n        .catch(err => {\n            console.error(err)\n        })\n}","import React, {createContext, useReducer} from 'react'\nimport WeatherReducer from '../reducers/WeatherReducer'\n\nimport {weatherAPI} from '../api/WeatherAPI'\n\n\nconst initialState = {\n    weatherData: []\n}\n        // {\n        //     \"rh\": 80,\n        //     \"pod\": \"d\",\n        //     \"lon\": -8.64554,\n        //     \"pres\": 1015.5,\n        //     \"timezone\": \"Europe\\/Lisbon\",\n        //     \"ob_time\": \"2020-12-27 14:25\",\n        //     \"country_code\": \"PT\",\n        //     \"clouds\": 100,\n        //     \"ts\": 1609079100,\n        //     \"solar_rad\": 72.9,\n        //     \"state_code\": \"02\",\n        //     \"city_name\": \"Aveiro\",\n        //     \"wind_spd\": 0.45,\n        //     \"wind_cdir_full\": \"east\",\n        //     \"wind_cdir\": \"E\",\n        //     \"slp\": 1017.7,\n        //     \"vis\": 5,\n        //     \"h_angle\": 36,\n        //     \"sunset\": \"17:14\",\n        //     \"dni\": 734.36,\n        //     \"dewpt\": 5.7,\n        //     \"snow\": 0,\n        //     \"uv\": 3.8878,\n        //     \"precip\": 0,\n        //     \"wind_dir\": 82,\n        //     \"sunrise\": \"07:56\",\n        //     \"ghi\": 364.37,\n        //     \"dhi\": 85.64,\n        //     \"aqi\": 26,\n        //     \"lat\": 40.64427,\n        //     \"weather\": {\n        //         \"icon\": \"c04d\",\n        //         \"code\": 804,\n        //         \"description\": \"Overcast clouds\"\n        //     },\n        //     \"datetime\": \"2020-12-27:14\",\n        //     \"temp\": 8.9,\n        //     \"station\": \"D5475\",\n        //     \"elev_angle\": 22.89,\n        //     \"app_temp\": 8.9\n        \n        // }\n\n\nexport const GlobalContext = createContext(initialState);\n\n\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(WeatherReducer, initialState);\n\n    async function addCity(cityName) {\n        // console.log('1', cityName);\n        const cityData =  await weatherAPI(cityName);\n        // console.log('2', cityData)\n        dispatch({\n            type: 'ADD_CITY',\n            payload: cityData\n        })\n    }\n\n    return (\n        <GlobalContext.Provider value={{\n            weatherData: state.weatherData,\n            addCity\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Header = () => {\n\n    const [cityName, setCity] = useState('');\n\n    const {addCity} = useContext(GlobalContext);\n\n    const onSubmit = e => {\n        e.preventDefault();\n        addCity(cityName);\n        setCity('');\n    }\n\n    return (\n        <nav className=\"navbar navbar-dark bg-dark justify-content-between\" onSubmit={onSubmit}>\n            <span style={logoColor} className=\"my-2 mx-4\">LOGO</span>\n            <form className=\"form-inline my-2 mx-4 my-lg-0\">\n                <input className=\"form-control mr-sm-2\" type=\"search\"placeholder=\"Search\" aria-label=\"Search\" \n                value={cityName} \n                onChange={ (e)=> setCity(e.target.value)} \n                />\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n            </form>\n        </nav>\n    )\n}\n\nconst logoColor = {\n    color: 'white'\n}\n","import React, { useEffect, useState} from 'react'\nimport mtz from 'moment-timezone'\n\nexport const Weather = ({weather}) => {\n    const [sunrise, setSunrise] = useState('');\n    const [sunset, setSunset] = useState('');\n    // const [icon, setIcon] = useState();\n\n\n    useEffect(() => {\n        // use momento.js to get todays date\n        const dateNow = mtz().tz(weather.timezone).format('YYYY-MM-DD');\n        // use momento.js to get sunrise and sunset hour\n        const sunrise = mtz(dateNow + ' ' + weather.sunrise).tz(weather.timezone).format('HH:mm');\n        const sunset = mtz(dateNow + ' ' + weather.sunset).tz(weather.timezone).format('HH:mm');\n\n        setSunrise(sunrise);\n        setSunset(sunset);\n        // const icon = require(`../icons/${weather.weather.icon}.png`);\n        // setIcon(icon);\n\n    }, [weather.timezone, weather.sunrise, weather.sunset])\n\n    return (\n        <div className=\"weather-container text-center col-3 m-5\">\n            <div className=\"city-name mt-4\">\n                {weather.city_name}\n            </div>\n            <div className=\"temp-container mb-3 mt-5 mx-auto\">\n                <span className=\"temp-data\">\n                    {weather.temp}ÂºC\n                </span>\n            </div>\n            <div className=\"weather-desc \">\n                <div className=\"mx-auto\"><img src={`../icons/${weather.weather.icon}.png`} alt=\"\"  /></div>\n                {weather.weather.description}\n            </div>\n            <div className=\"sunset-sunrise mt-4\">\n                <span className=\"sunrise mr-3\">\n                    <label>Sunrise:</label> {sunrise}\n                </span>\n                <span className=\"sunset ml-3\">\n                    <label>Sunset:</label> {sunset}\n                </span>\n            </div>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nimport {Weather} from './Weather'\n\nexport const WeatherList = () => {\n\n    const { weatherData } = useContext(GlobalContext)\n\n    const weatherCities = weatherData.map(city =>\n        <Weather key={city.city_name} weather={city} />\n    );\n\n    // console.log('teste', weatherData);\n    return (\n        <div className=\"row\">\n            {weatherCities}\n            {/* <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        {weatherData.map(weather => <th key={weather.city_name}>{weather.city_name}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th>temp</th>\n                        {weatherData.map(weather => <td key={weather.city_name}>{weather.temp}</td>)}\n                    </tr>\n                    <tr>\n                        <th>sunrise</th>\n                        {weatherData.map(weather => <td key={weather.city_name}>{weather.sunrise}</td>)}\n                    </tr>\n                    <tr>\n                        <th>sunset</th>\n                        {weatherData.map(weather => <td key={weather.city_name}>{weather.sunset}</td>)}\n                    </tr>\n                </tbody>\n            </table> */}\n\n\n        </div>\n    )\n}\n","import React from 'react'\nimport '../styles/App.css'\nimport {Header} from './Header'\nimport {WeatherList} from './WeatherList'\n\nimport {GlobalProvider} from '../context/GlobalState'\n\nexport default function App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container-fluid\">\n        <WeatherList/>\n      </div>\n    </GlobalProvider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}